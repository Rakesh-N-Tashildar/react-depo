{"version":3,"sources":["reportWebVitals.js","index.js","App.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","useState","calc","setCalc","result","setResult","ops","updateCalc","value","includes","slice","eval","toString","createDigits","digits","i","push","onClick","calculate","deletLast","className"],"mappings":"wLAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,K,+iBCbA,SAASY,MACP,cAAuBG,oDAAS,IAAhC,4IAAOC,KAAP,cAAaC,QAAb,cACA,WAA4BF,oDAAS,IAArC,6IAAOG,OAAP,cAAeC,UAAf,cACMC,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,KACrBC,WAAa,SAAbA,WAAaC,OAEfF,IAAIG,SAASD,QAAkB,KAARN,MACvBI,IAAIG,SAASD,QAAUF,IAAIG,SAASP,KAAKQ,OAAO,MAIlDP,QAAQD,KAAKM,OACTF,IAAIG,SAASD,QACfH,UAAUM,KAAKT,KAAKM,OAAOI,cAMzBC,aAAe,WAEnB,IADA,IAAMC,EAAS,GADS,WAEfC,GACPD,EAAOE,KACL,qEAAQC,QAAS,kBACfV,WAAWQ,EAAEH,aADf,SAGKG,GADEA,KAJFA,EAAE,EAAGA,EAAI,GAAIA,IAAK,EAAlBA,GAQP,OAAOD,GAELI,UAAY,SAAZA,YACJf,QAAQQ,KAAKT,MAAMU,aAEfO,UAAY,WAChB,GAAU,IAANjB,KAAJ,CAGA,IAAMM,EAAQN,KAAKQ,MAAM,GAAI,GAE7BP,QAASK,GACTH,UAAUG,KAKZ,OACE,kEAAKY,UAAU,MAAf,SACE,mEAAKA,UAAU,aAAf,UACE,mEAAKA,UAAU,UAAf,UACGhB,OAAS,kFAAQA,OAAR,OAAwB,GAAKF,MAAY,KAIrD,mEAAKkB,UAAU,YAAf,UACE,qEAAQH,QAAS,kBAAKV,WAAW,MAAjC,eACA,qEAAQU,QAAS,kBAAKV,WAAW,MAAjC,eACA,qEAAQU,QAAS,kBAAKV,WAAW,MAAjC,eACA,qEAAQU,QAAS,kBAAKV,WAAW,MAAjC,eACA,qEAAQU,QAASE,UAAjB,oBAGF,mEAAKC,UAAU,SAAf,UACGP,eACD,qEAAQI,QAAS,kBAAKV,WAAW,MAAjC,eACA,qEAAQU,QAAS,kBAAKV,WAAW,MAAjC,eACA,qEAAQU,QAASC,UAAjB,uBAUKpB,4B","file":"static/js/main.7c9ea64e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, {useState} from 'react'\r\n\r\n\r\nfunction App() {\r\n  const [calc, setCalc]= useState(\"\");\r\n  const [result, setResult] = useState(\"\");\r\n  const ops=['/','*','+','-','.'];\r\n  const updateCalc = value =>{\r\n    if(\r\n      ops.includes(value) && calc ===''||\r\n      ops.includes(value) && ops.includes(calc.slice(-1))\r\n    ){\r\n      return;\r\n    }\r\n    setCalc(calc+value);\r\n    if(!ops.includes(value)){\r\n      setResult(eval(calc+value).toString());\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const createDigits = () =>{\r\n    const digits = [];\r\n    for (let i=1; i < 10; i++){\r\n      digits.push(\r\n        <button onClick={()=> \r\n          updateCalc(i.toString())} \r\n          key={i}>\r\n            {i}\r\n          </button>\r\n      )\r\n    } return digits;\r\n  }\r\n  const calculate = ()=>{\r\n    setCalc(eval(calc).toString());\r\n  }\r\n  const deletLast = ()=>{\r\n    if (calc==''){\r\n      return;\r\n    }\r\n    const value = calc.slice(0, -1);\r\n    \r\n    setCalc (value);\r\n    setResult(value)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"calculator\">\r\n        <div className=\"display\">\r\n          {result ? <span>({result})</span>:'' }{calc ? calc:0}\r\n        </div>\r\n\r\n\r\n        <div className=\"operators\">\r\n          <button onClick={()=> updateCalc('/')}>/</button>\r\n          <button onClick={()=> updateCalc('*')}>*</button>\r\n          <button onClick={()=> updateCalc('+')}>+</button>\r\n          <button onClick={()=> updateCalc('-')}>-</button>\r\n          <button onClick={deletLast}>DEL</button>\r\n          \r\n        </div>\r\n        <div className=\"digits\">\r\n          {createDigits()}\r\n          <button onClick={()=> updateCalc('/')}>0</button>\r\n          <button onClick={()=> updateCalc('/')}>.</button>\r\n          <button onClick={calculate}>=</button>\r\n        </div> \r\n\r\n\r\n        \r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\nexport default App;"],"sourceRoot":""}